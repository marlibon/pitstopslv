// Общий класс, позволяющий рендерить произвольный шаблон, селектор которого передаётся в конструктор,
// в произвольный элемент-контейнер.
// каждый экземпляр класса - это DOM элемент, куда будет вставляться контент
export class Renderable {
  constructor ({items, renderer}, container) {
    this._renderedItems = items; //массив items, это список товаров или список кнопок, то есть список того, что отобразить
    this._renderer = renderer; //колбек функция обработки каждого элемента из списка. Тут самой функции нет, только переменная, функция будет написана  в момент присвоения экземпляра. Делается, чтобы у классов была "слабая связь", то есть не прописаны конкретные условия использования других классов
    this._container = document.querySelector(`${container}`); //селектор контейнера, куда будет вставляться контент
  }
  _clear() {
    //очистка контента в контейнере дива перед добавлением нового контента. Очищение нужно, чтобы не было дополнения в конец, а полная замена контента
    this._container.innerHTML = "";
  }
  renderItems() {
    //рендерит: сначала очищает контент с помощью clear(), потом проходит по каждому элементу массива, и внутри цикла forEach использует колбек-функцию this._renderer, которая пишется в момент присвоения экземпляра
    this._clear();
    this._renderedItems.forEach(item => {
      this._renderer(item);
    })
  }

  addItem(element) {
    //берет элемент и вставляет внутрь селектора (в конец) html верстку, в указанный в конструкторе див (this._container)
    this._container.prepend(element);
  }
}